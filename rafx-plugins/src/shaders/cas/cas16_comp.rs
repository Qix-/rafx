// This code is auto-generated by the shader processor.

#[allow(unused_imports)]
use rafx::RafxResult;

#[allow(unused_imports)]
use rafx::framework::{
    DescriptorSetAllocator, DescriptorSetArc, DescriptorSetBindings, DescriptorSetInitializer,
    DescriptorSetWriter, DescriptorSetWriterContext, DynDescriptorSet, ImageViewResource,
    ResourceArc,
};

#[derive(Copy, Clone, Debug)]
#[repr(C)]
pub struct ConfigStd140 {
    pub image_width: u32,    // +0 (size: 4)
    pub image_height: u32,   // +4 (size: 4)
    pub sharpen_amount: f32, // +8 (size: 4)
    pub _padding0: [u8; 4],  // +12 (size: 4)
} // 16 bytes

impl Default for ConfigStd140 {
    fn default() -> Self {
        ConfigStd140 {
            image_width: <u32>::default(),
            image_height: <u32>::default(),
            sharpen_amount: <f32>::default(),
            _padding0: [u8::default(); 4],
        }
    }
}

pub type ConfigUniform = ConfigStd140;

pub const CONFIG_DESCRIPTOR_SET_INDEX: usize = 0;
pub const CONFIG_DESCRIPTOR_BINDING_INDEX: usize = 0;
pub const IMG_SRC_DESCRIPTOR_SET_INDEX: usize = 0;
pub const IMG_SRC_DESCRIPTOR_BINDING_INDEX: usize = 1;
pub const IMG_DST_DESCRIPTOR_SET_INDEX: usize = 0;
pub const IMG_DST_DESCRIPTOR_BINDING_INDEX: usize = 2;

pub struct DescriptorSet0Args<'a> {
    pub config: &'a ConfigUniform,
    pub img_src: &'a ResourceArc<ImageViewResource>,
    pub img_dst: &'a ResourceArc<ImageViewResource>,
}

impl<'a> DescriptorSetInitializer<'a> for DescriptorSet0Args<'a> {
    type Output = DescriptorSet0;

    fn create_dyn_descriptor_set(
        descriptor_set: DynDescriptorSet,
        args: Self,
    ) -> Self::Output {
        let mut descriptor = DescriptorSet0(descriptor_set);
        descriptor.set_args(args);
        descriptor
    }

    fn create_descriptor_set(
        descriptor_set_allocator: &mut DescriptorSetAllocator,
        descriptor_set: DynDescriptorSet,
        args: Self,
    ) -> RafxResult<DescriptorSetArc> {
        let mut descriptor = Self::create_dyn_descriptor_set(descriptor_set, args);
        descriptor.0.flush(descriptor_set_allocator)?;
        Ok(descriptor.0.descriptor_set().clone())
    }
}

impl<'a> DescriptorSetWriter<'a> for DescriptorSet0Args<'a> {
    fn write_to(
        descriptor_set: &mut DescriptorSetWriterContext,
        args: Self,
    ) {
        descriptor_set.set_buffer_data(CONFIG_DESCRIPTOR_BINDING_INDEX as u32, args.config);
        descriptor_set.set_image(IMG_SRC_DESCRIPTOR_BINDING_INDEX as u32, args.img_src);
        descriptor_set.set_image(IMG_DST_DESCRIPTOR_BINDING_INDEX as u32, args.img_dst);
    }
}

pub struct DescriptorSet0(pub DynDescriptorSet);

impl DescriptorSet0 {
    pub fn set_args_static(
        descriptor_set: &mut DynDescriptorSet,
        args: DescriptorSet0Args,
    ) {
        descriptor_set.set_buffer_data(CONFIG_DESCRIPTOR_BINDING_INDEX as u32, args.config);
        descriptor_set.set_image(IMG_SRC_DESCRIPTOR_BINDING_INDEX as u32, args.img_src);
        descriptor_set.set_image(IMG_DST_DESCRIPTOR_BINDING_INDEX as u32, args.img_dst);
    }

    pub fn set_args(
        &mut self,
        args: DescriptorSet0Args,
    ) {
        self.set_config(args.config);
        self.set_img_src(args.img_src);
        self.set_img_dst(args.img_dst);
    }

    pub fn set_config(
        &mut self,
        config: &ConfigUniform,
    ) {
        self.0
            .set_buffer_data(CONFIG_DESCRIPTOR_BINDING_INDEX as u32, config);
    }

    pub fn set_img_src(
        &mut self,
        img_src: &ResourceArc<ImageViewResource>,
    ) {
        self.0
            .set_image(IMG_SRC_DESCRIPTOR_BINDING_INDEX as u32, img_src);
    }

    pub fn set_img_dst(
        &mut self,
        img_dst: &ResourceArc<ImageViewResource>,
    ) {
        self.0
            .set_image(IMG_DST_DESCRIPTOR_BINDING_INDEX as u32, img_dst);
    }

    pub fn flush(
        &mut self,
        descriptor_set_allocator: &mut DescriptorSetAllocator,
    ) -> RafxResult<()> {
        self.0.flush(descriptor_set_allocator)
    }
}

#[cfg(test)]
mod test {
    use super::*;

    #[test]
    fn test_struct_config_std140() {
        assert_eq!(std::mem::size_of::<ConfigStd140>(), 16);
        assert_eq!(std::mem::size_of::<u32>(), 4);
        assert_eq!(std::mem::align_of::<u32>(), 4);
        assert_eq!(memoffset::offset_of!(ConfigStd140, image_width), 0);
        assert_eq!(std::mem::size_of::<u32>(), 4);
        assert_eq!(std::mem::align_of::<u32>(), 4);
        assert_eq!(memoffset::offset_of!(ConfigStd140, image_height), 4);
        assert_eq!(std::mem::size_of::<f32>(), 4);
        assert_eq!(std::mem::align_of::<f32>(), 4);
        assert_eq!(memoffset::offset_of!(ConfigStd140, sharpen_amount), 8);
        assert_eq!(std::mem::size_of::<[u8; 4]>(), 4);
        assert_eq!(std::mem::align_of::<[u8; 4]>(), 1);
        assert_eq!(memoffset::offset_of!(ConfigStd140, _padding0), 12);
    }
}
